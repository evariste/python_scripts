# Script to transform a mesh from template space to native fMRI space via the
# native T2.
#
# Runs in a virtual python environment. Run command
#
# source /Users/paulaljabar/work/scripts/python/pythonEnvs/surfaceAnalysis/bin/activate
#
# before invoking this script
#

import sys, os, argparse, tempfile
sys.path.append('/Users/paulaljabar/work/scripts/python')
from generalUtilsPythonPA import runCommand

#################################################
# Temporary file names.

tempDir = tempfile.gettempdir()
tempPID = str(os.getpid())

t2Mesh = os.path.join(tempDir , 'tmp-mesh-T2.vtk')
cerebrumShrinkT2 = os.path.join(tempDir , 'tmp-mesh-cerebrum.vtk')
resizeDof = os.path.join(tempDir , 'resize-temp.dof')
dofFunc2HiRes = os.path.join(tempDir , 'temp-func2highres.dof')
tempFileList = [t2Mesh, cerebrumShrinkT2, resizeDof, dofFunc2HiRes]

def removeTempFiles():
  print 'Remove temporary files.'
  for f in tempFileList:
    if os.path.isfile(f):
      os.remove(f)



#################################################


def main(*args):

  helpText = """Script to transform a mesh from template space to native fMRI space via the
native T2."""

  parser = argparse.ArgumentParser(description=helpText,
                                   formatter_class=argparse.RawTextHelpFormatter)

  helpText = "scan ID:  [Identifier]"
  parser.add_argument("scanID", type=str, help=helpText)

  helpText = "Data directory: Where the data is for the scan (volumetric and fmri)"
  parser.add_argument("dataDir", type=str, help=helpText)

  helpText = "Output: Output file to contain the transformed mesh (vtk)."
  parser.add_argument("output", type=str, help=helpText)

  helpText = "View result: Show transformed mesh and fMRI data."
  parser.add_argument("-view", action="store_true", help=helpText)

  helpText = "Verbose: Show more output"
  parser.add_argument("-verbose", action="store_true", help=helpText)
  helpText = ""

  args = parser.parse_args()

  #############################################################


  # TODO: Some of the following should be arguments.
  scanID = args.scanID  # 'EP2830'

  dataDir = args.dataDir  # '/Users/paulaljabar/work/cdb/e-prime/from-peridata/EPRIME'

  funcMesh = args.output

  irtkDir = '/Users/paulaljabar/work/packages/irtk/build/bin'

  workingDir = '/Users/paulaljabar/work/sandpit'
  atlasDir = '/Users/paulaljabar/work/atlases/neo-nr-T1-T2-segs'

  atlasMesh = atlasDir + '/atlas-7/cortex-mid-40-weeks.vtk'

  quietTF = True
  if args.verbose:
    quietTF = False

  viewResult = False
  if args.view:
    viewResult = True

  #################################################


  scanDir = dataDir + '/' + scanID
  scanT2Dir = scanDir + '/003_volumetric_data'
  scanSegDir = scanT2Dir + '/segmentations'
  scanICADir = (scanDir + '/002_functional_data/'
                + scanID + '_rs_fMRI.ica')
  tissueSegImg = scanSegDir + '/' + scanID + '_tissue_labels.nii.gz'

  if not os.path.exists(scanICADir):
    print '\n\nData for ID {0:s} has no ICA sub-folder!'.format(scanID)
    print 'exiting\n\n'
    sys.exit(0)


  if not os.path.exists(scanSegDir):
    print '\n\nData for ID {0:s} has no segmentation sub-folder!'.format(scanID)
    print 'exiting\n\n'
    sys.exit(0)



  #################################################

  print 'Map atlas mesh to individual T2 image'


  dofFileT2toTemplate = (scanDir + '/003_volumetric_data/'
                         + scanID + '_T2_to_template.dof')

  cmd = (irtkDir + '/stransformation'
         + ' ' + atlasMesh
         + ' ' + t2Mesh
         + ' ' + '-dofin ' + dofFileT2toTemplate)
  _, _ = runCommand(cmd, quiet=quietTF)


  #################################################

  # Ensure t2 mesh is definitely inside the cortex, i.e. not perhaps at the outer
  # edge Do this by registering to the surface of a mask generated by eroding a
  # cerebrum mask

  print 'Getting mesh inside the cerebrum'


  cmd = (irtkDir + '/extract_roi'
         + ' ' + tissueSegImg
         + ' ' + cerebrumShrinkT2
         + ' ' + '2 3 5 7')
  _, _ = runCommand(cmd, quiet=quietTF)

  cmd = (irtkDir + '/dilation'
         + ' ' + cerebrumShrinkT2
         + ' ' + cerebrumShrinkT2
         + ' ' + '-iterations 3')
  _, _ = runCommand(cmd, quiet=quietTF)

  cmd = (irtkDir + '/erosion'
         + ' ' + cerebrumShrinkT2
         + ' ' + cerebrumShrinkT2
         + ' ' + '-iterations 6')
  _, _ = runCommand(cmd, quiet=quietTF)

  cmd = (irtkDir + '/rescale'
         + ' ' + cerebrumShrinkT2
         + ' ' + cerebrumShrinkT2
         + ' ' + '0 1000')
  _, _ = runCommand(cmd, quiet=quietTF)

  cmd = (irtkDir + '/blur'
         + ' ' + cerebrumShrinkT2
         + ' ' + cerebrumShrinkT2
         + ' ' + '2')
  _, _ = runCommand(cmd, quiet=quietTF)

  cmd = (irtkDir + '/mcubes'
         + ' ' + cerebrumShrinkT2
         + ' ' + cerebrumShrinkT2
         + ' ' + '500')
  _, _ = runCommand(cmd, quiet=quietTF)


  #################################################

  print 'Registering and transforming T2 mesh to shrunk cerebrum mesh'


  cmd = (irtkDir + '/sareg'
         + ' ' + t2Mesh
         + ' ' + cerebrumShrinkT2
         + ' ' + '-dofout ' + resizeDof
         + ' ' + '-gradientDescent')
  _, _ = runCommand(cmd, quiet=quietTF)


  cmd = (irtkDir + '/stransformation'
         + ' ' + t2Mesh
         + ' ' + t2Mesh
         + ' ' + '-dofin ' + resizeDof)
  _, _ = runCommand(cmd, quiet=quietTF)


  ###########################################

  # map shrunk T2 mesh to individual fmri data

  print 'Getting dof file from fMRI data to T2 image (from FLIRT output)'

  flirtFile = scanICADir + '/reg/example_func2highres.mat'
  target = scanT2Dir + '/' + scanID + '_T2.nii.gz'
  source = scanICADir + '/example_func.nii.gz'


  cmd = (irtkDir + '/flirt2dof'
         + ' ' + flirtFile
         + ' ' + target
         + ' ' + source
         + ' ' + dofFunc2HiRes)
  _, _ = runCommand(cmd, quiet=quietTF)


  print 'Transforming mesh from T2 to fMRI data'

  funcMesh = os.path.join(workingDir , 'mesh-func-' + scanID + '.vtk')

  cmd = (irtkDir + '/stransformation'
         + ' ' + t2Mesh
         + ' ' + funcMesh
         + ' ' + '-dofin ' + dofFunc2HiRes)
  _, _ = runCommand(cmd, quiet=quietTF)


  if viewResult:
    cmd = (irtkDir + '/rview'
           + ' ' + source
           + ' ' + '-object ' + funcMesh)
    _, _ = runCommand(cmd, quiet=quietTF)

  ##########################################################


  removeTempFiles()


##########################################################
##########################################################

if __name__ == '__main__':
  sys.exit(main(*sys.argv))

